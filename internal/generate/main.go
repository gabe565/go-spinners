//go:build generate

package main

import (
	"bytes"
	_ "embed"
	"encoding/json"
	"fmt"
	"log/slog"
	"os"
	"path/filepath"
	"runtime"
	"strings"

	. "github.com/dave/jennifer/jen"
)

var (
	//go:embed node_modules/cli-spinners/spinners.json
	spinnerJson []byte

	dst string
)

type rawSpinner struct {
	Name     string
	Interval int
	Frames   []string
}

func main() {
	if err := generate(); err != nil {
		fmt.Println(err.Error())
		os.Exit(1)
	}
}

func generate() error {
	_, cwd, _, _ := runtime.Caller(0)
	dst = filepath.Join(filepath.Dir(cwd), "..", "..")

	if err := generateSpinnerStruct(); err != nil {
		return err
	}

	spinners, err := generateSpinners()
	if err != nil {
		return err
	}

	if err := generateMap(spinners); err != nil {
		return err
	}

	return nil
}

func newFile() *File {
	f := NewFile("spinner")
	f.HeaderComment("Code generated by generate/main.go; DO NOT EDIT.")
	return f
}

func generateSpinnerStruct() error {
	slog.Info("Generating spinner.go")

	f := newFile()
	f.Type().Id("Spinner").Struct(
		Id("Frames").Index().String(),
		Id("Interval").Qual("time", "Duration"),
	)

	out, err := os.Create(filepath.Join(dst, "spinner.go"))
	if err != nil {
		return err
	}
	defer func() {
		_ = out.Close()
	}()

	if err := f.Render(out); err != nil {
		return err
	}

	return out.Close()
}

func generateSpinners() ([]string, error) {
	slog.Info("Generating spinners.go")

	decoder := json.NewDecoder(bytes.NewReader(spinnerJson))
	tok, err := decoder.Token()
	if err != nil || tok != json.Delim('{') {
		return []string{}, fmt.Errorf("expected object")
	}

	var spinnerSlice []rawSpinner
	for decoder.More() {
		key, err := decoder.Token()
		if err != nil {
			return []string{}, err
		}

		var raw rawSpinner
		if err := decoder.Decode(&raw); err != nil {
			return []string{}, err
		}

		var ok bool
		raw.Name, ok = key.(string)
		if !ok {
			return []string{}, fmt.Errorf("invalid key")
		}

		spinnerSlice = append(spinnerSlice, raw)
	}

	f := newFile()
	created := make([]string, 0, len(spinnerSlice))

	f.Var().DefsFunc(func(group *Group) {
		for _, raw := range spinnerSlice {
			group.Id(capitalizeFirst(raw.Name)).Op("=").
				Id("Spinner").
				Values(Dict{
					Id("Frames"): Index().String().ValuesFunc(func(group *Group) {
						for _, frame := range raw.Frames {
							group.Lit(frame)
						}
					}),
					Id("Interval"): Lit(raw.Interval).Op("*").Qual("time", "Millisecond"),
				}).Line()

			created = append(created, raw.Name)
		}
	})

	out, err := os.Create(filepath.Join(dst, "spinners.go"))
	if err != nil {
		return created, err
	}

	if err := f.Render(out); err != nil {
		return created, err
	}

	if err := out.Close(); err != nil {
		return created, err
	}

	return created, nil
}

func generateMap(spinners []string) error {
	slog.Info("Generating map.go")

	f := newFile()
	f.Var().Id("Map").Op("=").Map(String()).Id("Spinner").BlockFunc(func(group *Group) {
		for _, spinner := range spinners {
			group.Lit(spinner).Op(":").Id(capitalizeFirst(spinner)).Op(",")
		}
	})

	out, err := os.Create(filepath.Join(dst, "map.go"))
	if err != nil {
		return err
	}
	defer func() {
		_ = out.Close()
	}()

	if err := f.Render(out); err != nil {
		return err
	}

	return out.Close()
}

func capitalizeFirst(s string) string {
	return strings.ToTitle(s[0:1]) + s[1:]
}
